package com.example.ecommercecommand.service;

import com.example.ecommercecommand.exceptions.CustomerNotFoundException;
import com.example.ecommercecommand.model.Customer;
import com.example.ecommercecommand.producers.CustomerProducer;
import com.example.ecommercecommand.repository.CustomerRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CustomerService {

    private static final Logger logger = LoggerFactory.getLogger(CustomerService.class);

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private CustomerProducer customerProducer;

    public void saveCustomer(Customer customer) {
        try {
            // Save the customer object and capture the returned value, which might include autogenerated fields like ID.
            Customer savedCustomer = customerRepository.save(customer);
            // Send the event using the savedCustomer object to ensure it contains the most up-to-date information.
            customerProducer.sendCustomerCreatedEvent(savedCustomer);
        } catch (Exception e) {
            logger.error("An unexpected exception occurred while creating the customer ", e);
        }
    }

    public void updateCustomer(Long id, Customer newCustomer) {
        try {
            if (!customerRepository.existsById(id)) {
                throw new CustomerNotFoundException(id);
            }
            Customer customer = customerRepository.getReferenceById(id);
            customer.setCustomerId(id);
            customer.setName(newCustomer.getName());
            customer.setEmail(newCustomer.getEmail());
            customer.setPhoneNumber(newCustomer.getPhoneNumber());
            // Save the updated customer object back to the database
            Customer updatedCustomer = customerRepository.save(customer);
            // Send CustomerUpdated event using the updatedCustomer object which contains the most up-to-date data
            customerProducer.sendCustomerUpdatedEvent(updatedCustomer);
        } catch (CustomerNotFoundException e) {
            logger.error(e.getMessage()); // Logging the exception message as an error
            throw e; // Re-throwing the exception
        } catch (Exception e) {
            logger.error("An unexpected exception occurred while updating the customer with id {}", id, e);
        }
    }

    public void deleteCustomer(Long id) {
        try {
            if (!customerRepository.existsById(id)) {
                throw new CustomerNotFoundException(id);
            }
            customerRepository.deleteById(id);
            customerProducer.sendCustomerDeletedEvent(id);
        } catch (CustomerNotFoundException e) {
            logger.error(e.getMessage()); // Logging the exception message as an error
            throw e; // Re-throwing the exception
        } catch (Exception e) {
            logger.error("An unexpected exception occurred while deleting the customer with id {}", id, e);
        }
    }

}
